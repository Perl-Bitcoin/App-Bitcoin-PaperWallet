#!/usr/bin/env perl

use v5.12;
use warnings;
use utf8;

use Text::QRCode;
use List::Util qw(pairs);
use App::Bitcoin::PaperWallet;
use Time::Piece;
use Getopt::Long;
use Pod::Usage;

sub get_qr
{
	my ($data) = @_;
	my $arrayref = Text::QRCode->new->plot($data);
	return map { $_ =~ s/\*/â–ˆ/g; $_ } map { join '', map { $_, $_ } @$_ } @$arrayref;
}

sub align_qrs
{
	my @qr1 = @{shift()};
	my @qr2 = @{shift()};
	my $offset = ' ' x (length $qr1[0]);

	my @output;
	while (@qr1 || @qr2) {
		my $line = shift(@qr1) // $offset;
		$line .= ' ' x 4;
		$line .= shift(@qr2) // '';
		push @output, $line;
	}

	return @output;
}

binmode STDIN, ':encoding(UTF-8)';

my $stdout = !!0;
my $filename = 'wallet.txt';
my $auto_entropy = !!0;
my $help = !!0;

GetOptions(
	'auto|a' => \$auto_entropy,
	'file|f=s' => \$filename,
	'stdout|o' => \$stdout,
	'help|h' => \$help,
);

my $interactive = !$stdout;

sub echo
{
	my ($message) = @_;

	say $message if $interactive;
	return;
}

sub prompt
{
	my ($info) = @_;
	echo $info;

	my $data = <STDIN>;
	chomp $data;

	return $data;
}

sub get_entropy
{
	return prompt "Enter any random entropy: by rolling dice, drawing cards or other means available";
}

sub get_passphrase
{
	return prompt 'Enter passphrase for your private key. Warning: plaintext!';
}

if ($help) {
	pod2usage(1);
}

if (!$stdout && -e $filename) {
	die "wallet file $filename already exists";
}

my $entropy = $auto_entropy ? undef : get_entropy;
my $pass = get_passphrase;

my $bitcoin_data = App::Bitcoin::PaperWallet->generate($entropy, $pass);

my @data;
my $id = substr $bitcoin_data->{addresses}[0], -5;

push @data,
	"-- PASSWORD PROTECTED PRIVATE KEY FOR ID $id --",
	$bitcoin_data->{mnemonic},
	'',
	"-- ADDRESSES FOR ID $id --",
	''
;

my @qrs;
for my $addr (@{$bitcoin_data->{addresses}}) {
	push @data, $addr;
	push @qrs, [get_qr $addr];
}

push @data, '';

for my $qr (pairs @qrs) {
	push @data,
		align_qrs(@$qr),
		'',
		''
	;
}

push @data, '[Generated ' . localtime->cdate . ']';

if ($stdout) {
	binmode STDOUT, ':encoding(UTF-8)';
	print join "\n", @data;
}
else {
	open my $fh, '>:utf8', $filename
		or die "cannot open $filename";

	print {$fh} join "\n", @data;

	close $fh
		or die "could not close $filename";
}

echo "done - see $filename";

__END__

=head1 NAME

paper-wallet - Script to generate a paper wallet file

=head1 SYNOPSIS

	paper-wallet [OPTIONS]

=head1 OPTIONS

=over

=item -a, --auto

Generate entropy automatically using cryptographically-secure pseudorandom
number generator.

=item -o, --stdout

Do not print to file, use standard output instead. The script will not behave
interactively and instead will wait for data on standard input without
prompting anything. Best used with C<--auto> and a single standard input line
for password, or two lines: one for entropy, one for password

=item -f [FILE], --file [FILE]

Specify filename to print to - default is C<wallet.txt>. Has no effect if
C<--stdout> is passed.

=item -h, --help

Show this help message.

=back

=head1 DESCRIPTION

This script will generate a file in your current working directory that
contains Bitcoin wallet details ready to be printed or stored on a flash drive.
This file must not exist already or the script will fail (to ensure that you
don't override your previously generated wallet that you might have already
used).

This is intended to be used as cold storage (Bitcoin wallet which does not have
active connection to the Internet). The generation should best take place while
being offline.

The script will interactively ask for wallet password and entropy (random data
that secures your funds). If you don't have any means to generate random data,
like rolling dice, or you don't know how to properly do so (to ensure large
enough entropy), it is recommended to use the C<--auto> flag, which will use
secure random generators to do it for you. Password can be skipped by hitting
enter, but it is not recommended to do so. Remember that there is no way to
restore your password, so make sure you won't lose it.

After printing, you can cut off the top section (mnemonic seed) and store it
apart from the addresses for safety.

